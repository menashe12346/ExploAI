import pandas as pd
import json
import os
import re

# קבצים
EXPLOIT_CSV_PATH = "/home/menashe/cyber_ai_project/datasets/exploits/exploitdb/exploit_directory_detailed.csv"
CVE_JSON_PATH = "/home/menashe/cyber_ai_project/datasets/cve/cve_data/all_cves_combined.json"
OUTPUT_CSV_PATH = "/home/menashe/cyber_ai_project/datasets/exploits/exploitdb/exploit_directory_extended.csv"

# טען את הקובץ המקורי
df = pd.read_csv(EXPLOIT_CSV_PATH)

# טען את כל ה-CVEs מה-JSON
with open(CVE_JSON_PATH, "r") as f:
    cve_data = json.load(f)

# צור מילון למציאת CVE לפי ID
cve_dict = {entry["cve"]["CVE_data_meta"]["ID"]: entry for entry in cve_data}

# פונקציה להרחבת שורה עם שדות מתקדמים
def enrich_row(row):
    cve_id = row["cve"]
    result = {
        "cvss_score": "N/A",
        "cvss_vector": "N/A",
        "impact_score": "N/A",
        "exploitability_score": "N/A",
        "attack_vector": "N/A",
        "attack_complexity": "N/A",
        "privileges_required": "N/A",
        "user_interaction": "N/A",
        "scope": "N/A",
        "confidentiality_impact": "N/A",
        "integrity_impact": "N/A",
        "availability_impact": "N/A",
        "cwe_id": "N/A",
        "vulnerability_class": "N/A",
        "affected_products": "N/A",
        "exploit_length": "N/A",
        "exploit_language": "N/A",
        "verified": row.get("verified", "N/A"),
        "exploit_type": "N/A",
        "exploitdb_url": "N/A",
        "nvd_url": "N/A",
        "securityfocus_bid": "N/A"
    }

    if str(cve_id).lower() == "no cve" or cve_id not in cve_dict:
        return result

    cve = cve_dict[cve_id]

    # CVSS
    cvss_data = cve.get("impact", {}).get("baseMetricV2", {})
    cvss = cvss_data.get("cvssV2", {})
    result["cvss_score"] = cvss.get("baseScore", "N/A")
    result["cvss_vector"] = cvss.get("vectorString", "N/A")
    result["impact_score"] = cvss_data.get("impactScore", "N/A")
    result["exploitability_score"] = cvss_data.get("exploitabilityScore", "N/A")

    # מאפיינים
    result["attack_vector"] = cvss.get("accessVector", "N/A")
    result["attack_complexity"] = cvss.get("accessComplexity", "N/A")
    result["privileges_required"] = cvss.get("authentication", "N/A")
    result["confidentiality_impact"] = cvss.get("confidentialityImpact", "N/A")
    result["integrity_impact"] = cvss.get("integrityImpact", "N/A")
    result["availability_impact"] = cvss.get("availabilityImpact", "N/A")

    # CWE
    try:
        result["cwe_id"] = cve["cve"]["problemtype"]["problemtype_data"][0]["description"][0]["value"]
    except:
        result["cwe_id"] = "N/A"

    # רשימת מוצרים
    affected = []
    for node in cve.get("configurations", {}).get("nodes", []):
        for cpe in node.get("cpe_match", []):
            affected.append(cpe.get("cpe23Uri", ""))
    result["affected_products"] = "; ".join(affected)

    # קישורים
    refs = cve["cve"]["references"]["reference_data"]
    for ref in refs:
        url = ref.get("url", "")
        if "nvd.nist.gov" in url:
            result["nvd_url"] = url
        if "securityfocus.com/bid" in url:
            match = re.search(r"bid/(\d+)", url)
            if match:
                result["securityfocus_bid"] = match.group(1)

    # סוג אקפלויט
    exploit_path = row["exploit_path"]
    result["exploit_type"] = exploit_path.split("/")[2] if len(exploit_path.split("/")) > 2 else "unknown"
    result["exploit_language"] = os.path.splitext(exploit_path)[-1].replace(".", "")
    full_path = f"/home/menashe/cyber_ai_project/datasets/{exploit_path}"
    if os.path.isfile(full_path):
        try:
            with open(full_path, "r", errors="ignore") as f:
                code = f.read()
                result["exploit_length"] = len(code)
        except:
            result["exploit_length"] = "N/A"

    # ExploitDB URL
    file_id = exploit_path.split("/")[-1].split(".")[0]
    result["exploitdb_url"] = f"https://www.exploit-db.com/exploits/{file_id}"

    return result

# טיפול בשורות
enriched_rows = []
total = len(df)
for idx, row in df.iterrows():
    print(f"🔄 [{idx+1}/{total}] מרחיב את המידע עבור {row['exploit_path']} ({row['cve']})...")
    enriched = enrich_row(row)
    enriched_row = {**row, **enriched}
    enriched_rows.append(enriched_row)

# שמור קובץ חדש
df_out = pd.DataFrame(enriched_rows)
df_out.to_csv(OUTPUT_CSV_PATH, index=False, encoding="utf-8")
print(f"\n✅ הקובץ נשמר בהצלחה: {OUTPUT_CSV_PATH}")
